%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.6
-module(protos).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_LoginResponse.TipoUtilizador'/1, 'enum_value_by_symbol_LoginResponse.TipoUtilizador'/1]).
-export(['enum_symbol_by_value_OperationResponse.ResponseStatusCode'/1, 'enum_value_by_symbol_OperationResponse.ResponseStatusCode'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protos.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'LoginResponse.TipoUtilizador'() :: 'FABRICANTE' | 'IMPORTADOR' | 'ERRO'.
-type 'OperationResponse.ResponseStatusCode'() :: 'OK' | 'INVALID'.
-export_type(['LoginResponse.TipoUtilizador'/0, 'OperationResponse.ResponseStatusCode'/0]).

%% message types
-type 'LoginRequest'() :: #'LoginRequest'{}.

-type 'LoginResponse'() :: #'LoginResponse'{}.

-type 'AuthOperationRequest'() :: #'AuthOperationRequest'{}.

-type 'OperationRequest'() :: #'OperationRequest'{}.

-type 'OperationResponse'() :: #'OperationResponse'{}.

-type 'OfertaProducaoRequest'() :: #'OfertaProducaoRequest'{}.

-type 'OfertaEncomendaRequest'() :: #'OfertaEncomendaRequest'{}.

-type 'NotificacaOfertaProducao'() :: #'NotificacaOfertaProducao'{}.

-type 'NotificacaoResultadosImportador'() :: #'NotificacaoResultadosImportador'{}.

-type 'NotificacaoResultadosFabricante'() :: #'NotificacaoResultadosFabricante'{}.

-export_type(['LoginRequest'/0, 'LoginResponse'/0, 'AuthOperationRequest'/0, 'OperationRequest'/0, 'OperationResponse'/0, 'OfertaProducaoRequest'/0, 'OfertaEncomendaRequest'/0, 'NotificacaOfertaProducao'/0, 'NotificacaoResultadosImportador'/0, 'NotificacaoResultadosFabricante'/0]).

-spec encode_msg(#'LoginRequest'{} | #'LoginResponse'{} | #'AuthOperationRequest'{} | #'OperationRequest'{} | #'OperationResponse'{} | #'OfertaProducaoRequest'{} | #'OfertaEncomendaRequest'{} | #'NotificacaOfertaProducao'{} | #'NotificacaoResultadosImportador'{} | #'NotificacaoResultadosFabricante'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'LoginRequest'{} | #'LoginResponse'{} | #'AuthOperationRequest'{} | #'OperationRequest'{} | #'OperationResponse'{} | #'OfertaProducaoRequest'{} | #'OfertaEncomendaRequest'{} | #'NotificacaOfertaProducao'{} | #'NotificacaoResultadosImportador'{} | #'NotificacaoResultadosFabricante'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'LoginRequest'{} | #'LoginResponse'{} | #'AuthOperationRequest'{} | #'OperationRequest'{} | #'OperationResponse'{} | #'OfertaProducaoRequest'{} | #'OfertaEncomendaRequest'{} | #'NotificacaOfertaProducao'{} | #'NotificacaoResultadosImportador'{} | #'NotificacaoResultadosFabricante'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginRequest' ->
	  encode_msg_LoginRequest(id(Msg, TrUserData),
				  TrUserData);
      'LoginResponse' ->
	  encode_msg_LoginResponse(id(Msg, TrUserData),
				   TrUserData);
      'AuthOperationRequest' ->
	  encode_msg_AuthOperationRequest(id(Msg, TrUserData),
					  TrUserData);
      'OperationRequest' ->
	  encode_msg_OperationRequest(id(Msg, TrUserData),
				      TrUserData);
      'OperationResponse' ->
	  encode_msg_OperationResponse(id(Msg, TrUserData),
				       TrUserData);
      'OfertaProducaoRequest' ->
	  encode_msg_OfertaProducaoRequest(id(Msg, TrUserData),
					   TrUserData);
      'OfertaEncomendaRequest' ->
	  encode_msg_OfertaEncomendaRequest(id(Msg, TrUserData),
					    TrUserData);
      'NotificacaOfertaProducao' ->
	  encode_msg_NotificacaOfertaProducao(id(Msg, TrUserData),
					      TrUserData);
      'NotificacaoResultadosImportador' ->
	  encode_msg_NotificacaoResultadosImportador(id(Msg,
							TrUserData),
						     TrUserData);
      'NotificacaoResultadosFabricante' ->
	  encode_msg_NotificacaoResultadosFabricante(id(Msg,
							TrUserData),
						     TrUserData)
    end.


encode_msg_LoginRequest(Msg, TrUserData) ->
    encode_msg_LoginRequest(Msg, <<>>, TrUserData).


encode_msg_LoginRequest(#'LoginRequest'{nome = F1,
					password = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_LoginResponse(Msg, TrUserData) ->
    encode_msg_LoginResponse(Msg, <<>>, TrUserData).


encode_msg_LoginResponse(#'LoginResponse'{tipo = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'FABRICANTE'; TrF1 =:= 0 -> Bin;
		true ->
		    'e_enum_LoginResponse.TipoUtilizador'(TrF1,
							  <<Bin/binary, 8>>,
							  TrUserData)
	     end
	   end
    end.

encode_msg_AuthOperationRequest(Msg, TrUserData) ->
    encode_msg_AuthOperationRequest(Msg, <<>>, TrUserData).


encode_msg_AuthOperationRequest(#'AuthOperationRequest'{password
							    = F1,
							request = F2},
				Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_AuthOperationRequest_request(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
	     end
	   end
    end.

encode_msg_OperationRequest(Msg, TrUserData) ->
    encode_msg_OperationRequest(Msg, <<>>, TrUserData).


encode_msg_OperationRequest(#'OperationRequest'{nome =
						    F1,
						request = F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {producao, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_OperationRequest_producao(TrTF2,
						      <<B1/binary, 18>>,
						      TrUserData)
		 end;
	     {encomenda, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_OperationRequest_encomenda(TrTF2,
						       <<B1/binary, 26>>,
						       TrUserData)
		 end
	   end
    end.

encode_msg_OperationResponse(Msg, TrUserData) ->
    encode_msg_OperationResponse(Msg, <<>>, TrUserData).


encode_msg_OperationResponse(#'OperationResponse'{code =
						      F1},
			     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		true ->
		    'e_enum_OperationResponse.ResponseStatusCode'(TrF1,
								  <<Bin/binary,
								    8>>,
								  TrUserData)
	     end
	   end
    end.

encode_msg_OfertaProducaoRequest(Msg, TrUserData) ->
    encode_msg_OfertaProducaoRequest(Msg, <<>>, TrUserData).


encode_msg_OfertaProducaoRequest(#'OfertaProducaoRequest'{produto
							      = F1,
							  quantMin = F2,
							  quantMax = F3,
							  precoUniMin = F4,
							  duracaoS = F5},
				 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true ->
		    e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	     end
	   end
    end.

encode_msg_OfertaEncomendaRequest(Msg, TrUserData) ->
    encode_msg_OfertaEncomendaRequest(Msg, <<>>,
				      TrUserData).


encode_msg_OfertaEncomendaRequest(#'OfertaEncomendaRequest'{fabricante
								= F1,
							    produto = F2,
							    quant = F3,
							    preco = F4},
				  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true ->
		    e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_NotificacaOfertaProducao(Msg, TrUserData) ->
    encode_msg_NotificacaOfertaProducao(Msg, <<>>,
					TrUserData).


encode_msg_NotificacaOfertaProducao(#'NotificacaOfertaProducao'{produto
								    = F1,
								quantMin = F2,
								quantMax = F3,
								precoUniMin =
								    F4,
								duracaoS = F5},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true ->
		    e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	     end
	   end
    end.

encode_msg_NotificacaoResultadosImportador(Msg,
					   TrUserData) ->
    encode_msg_NotificacaoResultadosImportador(Msg, <<>>,
					       TrUserData).


encode_msg_NotificacaoResultadosImportador(#'NotificacaoResultadosImportador'{fabricante
										  =
										  F1,
									      produto
										  =
										  F2,
									      quant
										  =
										  F3,
									      preco
										  =
										  F4},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true ->
		    e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_NotificacaoResultadosFabricante(Msg,
					   TrUserData) ->
    encode_msg_NotificacaoResultadosFabricante(Msg, <<>>,
					       TrUserData).


encode_msg_NotificacaoResultadosFabricante(#'NotificacaoResultadosFabricante'{encomendas
										  =
										  F1},
					   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_NotificacaoResultadosFabricante_encomendas(TrF1,
								Bin, TrUserData)
      end
    end.

e_mfield_AuthOperationRequest_request(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_OperationRequest(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_OperationRequest_producao(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_OfertaProducaoRequest(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_OperationRequest_encomenda(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_OfertaEncomendaRequest(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_NotificacaoResultadosFabricante_encomendas(Msg,
						    Bin, TrUserData) ->
    SubBin = encode_msg_OfertaEncomendaRequest(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NotificacaoResultadosFabricante_encomendas([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_NotificacaoResultadosFabricante_encomendas(id(Elem,
							       TrUserData),
							    Bin2, TrUserData),
    e_field_NotificacaoResultadosFabricante_encomendas(Rest,
						       Bin3, TrUserData);
e_field_NotificacaoResultadosFabricante_encomendas([],
						   Bin, _TrUserData) ->
    Bin.

'e_enum_LoginResponse.TipoUtilizador'('FABRICANTE', Bin,
				      _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_LoginResponse.TipoUtilizador'('IMPORTADOR', Bin,
				      _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_LoginResponse.TipoUtilizador'('ERRO', Bin,
				      _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_LoginResponse.TipoUtilizador'(V, Bin,
				      _TrUserData) ->
    e_varint(V, Bin).

'e_enum_OperationResponse.ResponseStatusCode'('OK', Bin,
					      _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_OperationResponse.ResponseStatusCode'('INVALID',
					      Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_OperationResponse.ResponseStatusCode'(V, Bin,
					      _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('LoginRequest', Bin, TrUserData) ->
    id(decode_msg_LoginRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('LoginResponse', Bin, TrUserData) ->
    id(decode_msg_LoginResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthOperationRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthOperationRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OperationRequest', Bin,
		  TrUserData) ->
    id(decode_msg_OperationRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OperationResponse', Bin,
		  TrUserData) ->
    id(decode_msg_OperationResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfertaProducaoRequest', Bin,
		  TrUserData) ->
    id(decode_msg_OfertaProducaoRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OfertaEncomendaRequest', Bin,
		  TrUserData) ->
    id(decode_msg_OfertaEncomendaRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('NotificacaOfertaProducao', Bin,
		  TrUserData) ->
    id(decode_msg_NotificacaOfertaProducao(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('NotificacaoResultadosImportador',
		  Bin, TrUserData) ->
    id(decode_msg_NotificacaoResultadosImportador(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('NotificacaoResultadosFabricante',
		  Bin, TrUserData) ->
    id(decode_msg_NotificacaoResultadosFabricante(Bin,
						  TrUserData),
       TrUserData).



decode_msg_LoginRequest(Bin, TrUserData) ->
    dfp_read_field_def_LoginRequest(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    TrUserData).

dfp_read_field_def_LoginRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LoginRequest_nome(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_LoginRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LoginRequest_password(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'LoginRequest'{nome = F@_1, password = F@_2};
dfp_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_LoginRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LoginRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginRequest_nome(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_LoginRequest_password(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_LoginRequest(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_LoginRequest(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_LoginRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_LoginRequest(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'LoginRequest'{nome = F@_1, password = F@_2}.

d_field_LoginRequest_nome(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_nome(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_LoginRequest_nome(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_LoginRequest_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LoginRequest_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_LoginRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LoginRequest(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_LoginRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_LoginRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LoginRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRequest(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_LoginRequest(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRequest(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_LoginRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_LoginRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_LoginResponse(Bin, TrUserData) ->
    dfp_read_field_def_LoginResponse(Bin, 0, 0,
				     id('FABRICANTE', TrUserData), TrUserData).

dfp_read_field_def_LoginResponse(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_LoginResponse_tipo(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_LoginResponse(<<>>, 0, 0, F@_1, _) ->
    #'LoginResponse'{tipo = F@_1};
dfp_read_field_def_LoginResponse(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_LoginResponse(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_LoginResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LoginResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LoginResponse_tipo(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginResponse(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_LoginResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LoginResponse(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_LoginResponse(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_LoginResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LoginResponse(<<>>, 0, 0, F@_1, _) ->
    #'LoginResponse'{tipo = F@_1}.

d_field_LoginResponse_tipo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LoginResponse_tipo(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_LoginResponse_tipo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_LoginResponse.TipoUtilizador'(begin
						    <<Res:32/signed-native>> =
							<<(X bsl N +
							     Acc):32/unsigned-native>>,
						    id(Res, TrUserData)
						  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_LoginResponse(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_LoginResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_LoginResponse(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_LoginResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_LoginResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LoginResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginResponse(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_LoginResponse(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginResponse(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_LoginResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_LoginResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_LoginResponse(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_AuthOperationRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthOperationRequest(Bin, 0, 0,
					    id([], TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_AuthOperationRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthOperationRequest_password(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_AuthOperationRequest(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuthOperationRequest_request(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_AuthOperationRequest(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'AuthOperationRequest'{password = F@_1,
			    request = F@_2};
dfp_read_field_def_AuthOperationRequest(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_AuthOperationRequest(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_AuthOperationRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthOperationRequest(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_AuthOperationRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuthOperationRequest_password(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_field_AuthOperationRequest_request(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthOperationRequest(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_AuthOperationRequest(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_AuthOperationRequest(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_AuthOperationRequest(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_AuthOperationRequest(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_AuthOperationRequest(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'AuthOperationRequest'{password = F@_1,
			    request = F@_2}.

d_field_AuthOperationRequest_password(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthOperationRequest_password(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_AuthOperationRequest_password(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthOperationRequest(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_AuthOperationRequest_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuthOperationRequest_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_AuthOperationRequest_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OperationRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthOperationRequest(RestF, 0, 0,
					    F@_1,
					    if Prev == undefined -> NewFValue;
					       true ->
						   merge_msg_OperationRequest(Prev,
									      NewFValue,
									      TrUserData)
					    end,
					    TrUserData).

skip_varint_AuthOperationRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuthOperationRequest(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_AuthOperationRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthOperationRequest(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_AuthOperationRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthOperationRequest(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_AuthOperationRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthOperationRequest(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_AuthOperationRequest(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthOperationRequest(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_AuthOperationRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthOperationRequest(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_AuthOperationRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuthOperationRequest(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_OperationRequest(Bin, TrUserData) ->
    dfp_read_field_def_OperationRequest(Bin, 0, 0,
					id([], TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_OperationRequest(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_OperationRequest_nome(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_OperationRequest(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_OperationRequest_producao(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_OperationRequest(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_OperationRequest_encomenda(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_OperationRequest(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'OperationRequest'{nome = F@_1, request = F@_2};
dfp_read_field_def_OperationRequest(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_OperationRequest(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_OperationRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OperationRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_OperationRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OperationRequest_nome(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_OperationRequest_producao(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      26 ->
	  d_field_OperationRequest_encomenda(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OperationRequest(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_OperationRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_OperationRequest(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_OperationRequest(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_OperationRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_OperationRequest(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'OperationRequest'{nome = F@_1, request = F@_2}.

d_field_OperationRequest_nome(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OperationRequest_nome(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OperationRequest_nome(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OperationRequest(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_OperationRequest_producao(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OperationRequest_producao(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OperationRequest_producao(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OfertaProducaoRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OperationRequest(RestF, 0, 0, F@_1,
					case Prev of
					  undefined ->
					      id({producao, NewFValue},
						 TrUserData);
					  {producao, MVPrev} ->
					      id({producao,
						  merge_msg_OfertaProducaoRequest(MVPrev,
										  NewFValue,
										  TrUserData)},
						 TrUserData);
					  _ ->
					      id({producao, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_OperationRequest_encomenda(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_OperationRequest_encomenda(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_OperationRequest_encomenda(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OfertaEncomendaRequest(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OperationRequest(RestF, 0, 0, F@_1,
					case Prev of
					  undefined ->
					      id({encomenda, NewFValue},
						 TrUserData);
					  {encomenda, MVPrev} ->
					      id({encomenda,
						  merge_msg_OfertaEncomendaRequest(MVPrev,
										   NewFValue,
										   TrUserData)},
						 TrUserData);
					  _ ->
					      id({encomenda, NewFValue},
						 TrUserData)
					end,
					TrUserData).

skip_varint_OperationRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_OperationRequest(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_OperationRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_OperationRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_OperationRequest(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_OperationRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperationRequest(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_OperationRequest(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OperationRequest(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_OperationRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_OperationRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_OperationRequest(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_OperationResponse(Bin, TrUserData) ->
    dfp_read_field_def_OperationResponse(Bin, 0, 0,
					 id('OK', TrUserData), TrUserData).

dfp_read_field_def_OperationResponse(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_OperationResponse_code(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_OperationResponse(<<>>, 0, 0, F@_1,
				     _) ->
    #'OperationResponse'{code = F@_1};
dfp_read_field_def_OperationResponse(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_OperationResponse(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_OperationResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OperationResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OperationResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OperationResponse_code(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OperationResponse(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_OperationResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OperationResponse(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_OperationResponse(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_OperationResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OperationResponse(<<>>, 0, 0, F@_1,
				    _) ->
    #'OperationResponse'{code = F@_1}.

d_field_OperationResponse_code(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OperationResponse_code(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_OperationResponse_code(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_OperationResponse.ResponseStatusCode'(begin
							    <<Res:32/signed-native>> =
								<<(X bsl N +
								     Acc):32/unsigned-native>>,
							    id(Res, TrUserData)
							  end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_OperationResponse(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_OperationResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_OperationResponse(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_OperationResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OperationResponse(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_OperationResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OperationResponse(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OperationResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OperationResponse(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_OperationResponse(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OperationResponse(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_OperationResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_OperationResponse(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_OperationResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_OperationResponse(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_OfertaProducaoRequest(Bin, TrUserData) ->
    dfp_read_field_def_OfertaProducaoRequest(Bin, 0, 0,
					     id([], TrUserData),
					     id(0, TrUserData),
					     id(0, TrUserData),
					     id(0, TrUserData),
					     id(0, TrUserData), TrUserData).

dfp_read_field_def_OfertaProducaoRequest(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_OfertaProducaoRequest_produto(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData);
dfp_read_field_def_OfertaProducaoRequest(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_OfertaProducaoRequest_quantMin(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_OfertaProducaoRequest(<<24,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_OfertaProducaoRequest_quantMax(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_OfertaProducaoRequest(<<32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_OfertaProducaoRequest_precoUniMin(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_OfertaProducaoRequest(<<40,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_OfertaProducaoRequest_duracaoS(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_OfertaProducaoRequest(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'OfertaProducaoRequest'{produto = F@_1,
			     quantMin = F@_2, quantMax = F@_3,
			     precoUniMin = F@_4, duracaoS = F@_5};
dfp_read_field_def_OfertaProducaoRequest(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    dg_read_field_def_OfertaProducaoRequest(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

dg_read_field_def_OfertaProducaoRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfertaProducaoRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
dg_read_field_def_OfertaProducaoRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OfertaProducaoRequest_produto(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5,
						TrUserData);
      16 ->
	  d_field_OfertaProducaoRequest_quantMin(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      24 ->
	  d_field_OfertaProducaoRequest_quantMax(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      32 ->
	  d_field_OfertaProducaoRequest_precoUniMin(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      40 ->
	  d_field_OfertaProducaoRequest_duracaoS(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OfertaProducaoRequest(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    1 ->
		skip_64_OfertaProducaoRequest(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_OfertaProducaoRequest(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5,
							    TrUserData);
	    3 ->
		skip_group_OfertaProducaoRequest(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
	    5 ->
		skip_32_OfertaProducaoRequest(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_OfertaProducaoRequest(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'OfertaProducaoRequest'{produto = F@_1,
			     quantMin = F@_2, quantMax = F@_3,
			     precoUniMin = F@_4, duracaoS = F@_5}.

d_field_OfertaProducaoRequest_produto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    d_field_OfertaProducaoRequest_produto(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
d_field_OfertaProducaoRequest_produto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OfertaProducaoRequest(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_OfertaProducaoRequest_quantMin(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_OfertaProducaoRequest_quantMin(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_OfertaProducaoRequest_quantMin(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaProducaoRequest(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_OfertaProducaoRequest_quantMax(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_OfertaProducaoRequest_quantMax(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_OfertaProducaoRequest_quantMax(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaProducaoRequest(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, F@_4, F@_5,
					     TrUserData).

d_field_OfertaProducaoRequest_precoUniMin(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_OfertaProducaoRequest_precoUniMin(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_OfertaProducaoRequest_precoUniMin(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaProducaoRequest(RestF, 0, 0,
					     F@_1, F@_2, F@_3, NewFValue, F@_5,
					     TrUserData).

d_field_OfertaProducaoRequest_duracaoS(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_OfertaProducaoRequest_duracaoS(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_OfertaProducaoRequest_duracaoS(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaProducaoRequest(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, NewFValue,
					     TrUserData).

skip_varint_OfertaProducaoRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    skip_varint_OfertaProducaoRequest(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_OfertaProducaoRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    dfp_read_field_def_OfertaProducaoRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_length_delimited_OfertaProducaoRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_OfertaProducaoRequest(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
skip_length_delimited_OfertaProducaoRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfertaProducaoRequest(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_group_OfertaProducaoRequest(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfertaProducaoRequest(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_32_OfertaProducaoRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OfertaProducaoRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_64_OfertaProducaoRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OfertaProducaoRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

decode_msg_OfertaEncomendaRequest(Bin, TrUserData) ->
    dfp_read_field_def_OfertaEncomendaRequest(Bin, 0, 0,
					      id([], TrUserData),
					      id([], TrUserData),
					      id(0, TrUserData),
					      id(0, TrUserData), TrUserData).

dfp_read_field_def_OfertaEncomendaRequest(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_OfertaEncomendaRequest_fabricante(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData);
dfp_read_field_def_OfertaEncomendaRequest(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_OfertaEncomendaRequest_produto(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_OfertaEncomendaRequest(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_OfertaEncomendaRequest_quant(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_OfertaEncomendaRequest(<<32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_OfertaEncomendaRequest_preco(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_OfertaEncomendaRequest(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #'OfertaEncomendaRequest'{fabricante = F@_1,
			      produto = F@_2, quant = F@_3, preco = F@_4};
dfp_read_field_def_OfertaEncomendaRequest(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_OfertaEncomendaRequest(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData).

dg_read_field_def_OfertaEncomendaRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OfertaEncomendaRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
dg_read_field_def_OfertaEncomendaRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OfertaEncomendaRequest_fabricante(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    TrUserData);
      18 ->
	  d_field_OfertaEncomendaRequest_produto(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_OfertaEncomendaRequest_quant(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_OfertaEncomendaRequest_preco(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OfertaEncomendaRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    1 ->
		skip_64_OfertaEncomendaRequest(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_OfertaEncomendaRequest(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
	    3 ->
		skip_group_OfertaEncomendaRequest(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
	    5 ->
		skip_32_OfertaEncomendaRequest(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_OfertaEncomendaRequest(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, _) ->
    #'OfertaEncomendaRequest'{fabricante = F@_1,
			      produto = F@_2, quant = F@_3, preco = F@_4}.

d_field_OfertaEncomendaRequest_fabricante(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    d_field_OfertaEncomendaRequest_fabricante(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
d_field_OfertaEncomendaRequest_fabricante(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OfertaEncomendaRequest(RestF, 0, 0,
					      NewFValue, F@_2, F@_3, F@_4,
					      TrUserData).

d_field_OfertaEncomendaRequest_produto(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    d_field_OfertaEncomendaRequest_produto(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
d_field_OfertaEncomendaRequest_produto(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OfertaEncomendaRequest(RestF, 0, 0,
					      F@_1, NewFValue, F@_3, F@_4,
					      TrUserData).

d_field_OfertaEncomendaRequest_quant(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OfertaEncomendaRequest_quant(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_OfertaEncomendaRequest_quant(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaEncomendaRequest(RestF, 0, 0,
					      F@_1, F@_2, NewFValue, F@_4,
					      TrUserData).

d_field_OfertaEncomendaRequest_preco(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OfertaEncomendaRequest_preco(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_OfertaEncomendaRequest_preco(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OfertaEncomendaRequest(RestF, 0, 0,
					      F@_1, F@_2, F@_3, NewFValue,
					      TrUserData).

skip_varint_OfertaEncomendaRequest(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    skip_varint_OfertaEncomendaRequest(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
skip_varint_OfertaEncomendaRequest(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    dfp_read_field_def_OfertaEncomendaRequest(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_length_delimited_OfertaEncomendaRequest(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_OfertaEncomendaRequest(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_OfertaEncomendaRequest(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfertaEncomendaRequest(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_group_OfertaEncomendaRequest(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OfertaEncomendaRequest(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_32_OfertaEncomendaRequest(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OfertaEncomendaRequest(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_64_OfertaEncomendaRequest(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OfertaEncomendaRequest(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

decode_msg_NotificacaOfertaProducao(Bin, TrUserData) ->
    dfp_read_field_def_NotificacaOfertaProducao(Bin, 0, 0,
						id([], TrUserData),
						id(0, TrUserData),
						id(0, TrUserData),
						id(0, TrUserData),
						id(0, TrUserData), TrUserData).

dfp_read_field_def_NotificacaOfertaProducao(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_NotificacaOfertaProducao_produto(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_NotificacaOfertaProducao(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_NotificacaOfertaProducao_quantMin(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_NotificacaOfertaProducao(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_NotificacaOfertaProducao_quantMax(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_NotificacaOfertaProducao(<<32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_NotificacaOfertaProducao_precoUniMin(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData);
dfp_read_field_def_NotificacaOfertaProducao(<<40,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_NotificacaOfertaProducao_duracaoS(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_NotificacaOfertaProducao(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'NotificacaOfertaProducao'{produto = F@_1,
				quantMin = F@_2, quantMax = F@_3,
				precoUniMin = F@_4, duracaoS = F@_5};
dfp_read_field_def_NotificacaOfertaProducao(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    dg_read_field_def_NotificacaOfertaProducao(Other, Z1,
					       Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

dg_read_field_def_NotificacaOfertaProducao(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotificacaOfertaProducao(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
dg_read_field_def_NotificacaOfertaProducao(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotificacaOfertaProducao_produto(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      16 ->
	  d_field_NotificacaOfertaProducao_quantMin(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      24 ->
	  d_field_NotificacaOfertaProducao_quantMax(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      32 ->
	  d_field_NotificacaOfertaProducao_precoUniMin(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, TrUserData);
      40 ->
	  d_field_NotificacaOfertaProducao_duracaoS(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotificacaOfertaProducao(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    1 ->
		skip_64_NotificacaOfertaProducao(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_NotificacaOfertaProducao(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    3 ->
		skip_group_NotificacaOfertaProducao(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
	    5 ->
		skip_32_NotificacaOfertaProducao(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_NotificacaOfertaProducao(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'NotificacaOfertaProducao'{produto = F@_1,
				quantMin = F@_2, quantMax = F@_3,
				precoUniMin = F@_4, duracaoS = F@_5}.

d_field_NotificacaOfertaProducao_produto(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_NotificacaOfertaProducao_produto(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_NotificacaOfertaProducao_produto(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotificacaOfertaProducao(RestF, 0, 0,
						NewFValue, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

d_field_NotificacaOfertaProducao_quantMin(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_NotificacaOfertaProducao_quantMin(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_NotificacaOfertaProducao_quantMin(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaOfertaProducao(RestF, 0, 0,
						F@_1, NewFValue, F@_3, F@_4,
						F@_5, TrUserData).

d_field_NotificacaOfertaProducao_quantMax(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_NotificacaOfertaProducao_quantMax(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_NotificacaOfertaProducao_quantMax(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaOfertaProducao(RestF, 0, 0,
						F@_1, F@_2, NewFValue, F@_4,
						F@_5, TrUserData).

d_field_NotificacaOfertaProducao_precoUniMin(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData)
    when N < 57 ->
    d_field_NotificacaOfertaProducao_precoUniMin(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
d_field_NotificacaOfertaProducao_precoUniMin(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaOfertaProducao(RestF, 0, 0,
						F@_1, F@_2, F@_3, NewFValue,
						F@_5, TrUserData).

d_field_NotificacaOfertaProducao_duracaoS(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_NotificacaOfertaProducao_duracaoS(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_NotificacaOfertaProducao_duracaoS(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaOfertaProducao(RestF, 0, 0,
						F@_1, F@_2, F@_3, F@_4,
						NewFValue, TrUserData).

skip_varint_NotificacaOfertaProducao(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    skip_varint_NotificacaOfertaProducao(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_NotificacaOfertaProducao(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dfp_read_field_def_NotificacaOfertaProducao(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

skip_length_delimited_NotificacaOfertaProducao(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotificacaOfertaProducao(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
skip_length_delimited_NotificacaOfertaProducao(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotificacaOfertaProducao(Rest2, 0, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

skip_group_NotificacaOfertaProducao(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotificacaOfertaProducao(Rest, 0, Z2,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

skip_32_NotificacaOfertaProducao(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_NotificacaOfertaProducao(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

skip_64_NotificacaOfertaProducao(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_NotificacaOfertaProducao(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

decode_msg_NotificacaoResultadosImportador(Bin,
					   TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosImportador(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id(0, TrUserData),
						       id(0, TrUserData),
						       TrUserData).

dfp_read_field_def_NotificacaoResultadosImportador(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    d_field_NotificacaoResultadosImportador_fabricante(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
dfp_read_field_def_NotificacaoResultadosImportador(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    d_field_NotificacaoResultadosImportador_produto(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
dfp_read_field_def_NotificacaoResultadosImportador(<<24,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    d_field_NotificacaoResultadosImportador_quant(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
dfp_read_field_def_NotificacaoResultadosImportador(<<32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    d_field_NotificacaoResultadosImportador_preco(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
dfp_read_field_def_NotificacaoResultadosImportador(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   _) ->
    #'NotificacaoResultadosImportador'{fabricante = F@_1,
				       produto = F@_2, quant = F@_3,
				       preco = F@_4};
dfp_read_field_def_NotificacaoResultadosImportador(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, TrUserData) ->
    dg_read_field_def_NotificacaoResultadosImportador(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData).

dg_read_field_def_NotificacaoResultadosImportador(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotificacaoResultadosImportador(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
dg_read_field_def_NotificacaoResultadosImportador(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotificacaoResultadosImportador_fabricante(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      18 ->
	  d_field_NotificacaoResultadosImportador_produto(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
      24 ->
	  d_field_NotificacaoResultadosImportador_quant(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      32 ->
	  d_field_NotificacaoResultadosImportador_preco(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotificacaoResultadosImportador(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, TrUserData);
	    1 ->
		skip_64_NotificacaoResultadosImportador(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    2 ->
		skip_length_delimited_NotificacaoResultadosImportador(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    3 ->
		skip_group_NotificacaoResultadosImportador(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3, F@_4,
							   TrUserData);
	    5 ->
		skip_32_NotificacaoResultadosImportador(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData)
	  end
    end;
dg_read_field_def_NotificacaoResultadosImportador(<<>>,
						  0, 0, F@_1, F@_2, F@_3, F@_4,
						  _) ->
    #'NotificacaoResultadosImportador'{fabricante = F@_1,
				       produto = F@_2, quant = F@_3,
				       preco = F@_4}.

d_field_NotificacaoResultadosImportador_fabricante(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    d_field_NotificacaoResultadosImportador_fabricante(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
d_field_NotificacaoResultadosImportador_fabricante(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2, F@_3, F@_4,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotificacaoResultadosImportador(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, F@_4, TrUserData).

d_field_NotificacaoResultadosImportador_produto(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    d_field_NotificacaoResultadosImportador_produto(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
d_field_NotificacaoResultadosImportador_produto(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotificacaoResultadosImportador(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, F@_4, TrUserData).

d_field_NotificacaoResultadosImportador_quant(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    d_field_NotificacaoResultadosImportador_quant(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
d_field_NotificacaoResultadosImportador_quant(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaoResultadosImportador(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, F@_4,
						       TrUserData).

d_field_NotificacaoResultadosImportador_preco(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    d_field_NotificacaoResultadosImportador_preco(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
d_field_NotificacaoResultadosImportador_preco(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_NotificacaoResultadosImportador(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       NewFValue, TrUserData).

skip_varint_NotificacaoResultadosImportador(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    skip_varint_NotificacaoResultadosImportador(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData);
skip_varint_NotificacaoResultadosImportador(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosImportador(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData).

skip_length_delimited_NotificacaoResultadosImportador(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotificacaoResultadosImportador(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
skip_length_delimited_NotificacaoResultadosImportador(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotificacaoResultadosImportador(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, TrUserData).

skip_group_NotificacaoResultadosImportador(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotificacaoResultadosImportador(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData).

skip_32_NotificacaoResultadosImportador(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosImportador(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData).

skip_64_NotificacaoResultadosImportador(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosImportador(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData).

decode_msg_NotificacaoResultadosFabricante(Bin,
					   TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosFabricante(Bin,
						       0, 0, id([], TrUserData),
						       TrUserData).

dfp_read_field_def_NotificacaoResultadosFabricante(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    d_field_NotificacaoResultadosFabricante_encomendas(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
dfp_read_field_def_NotificacaoResultadosFabricante(<<>>,
						   0, 0, R1, TrUserData) ->
    #'NotificacaoResultadosFabricante'{encomendas =
					   lists_reverse(R1, TrUserData)};
dfp_read_field_def_NotificacaoResultadosFabricante(Other,
						   Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_NotificacaoResultadosFabricante(Other,
						      Z1, Z2, F@_1, TrUserData).

dg_read_field_def_NotificacaoResultadosFabricante(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotificacaoResultadosFabricante(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
dg_read_field_def_NotificacaoResultadosFabricante(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotificacaoResultadosFabricante_encomendas(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotificacaoResultadosFabricante(Rest, 0, 0,
							    F@_1, TrUserData);
	    1 ->
		skip_64_NotificacaoResultadosFabricante(Rest, 0, 0,
							F@_1, TrUserData);
	    2 ->
		skip_length_delimited_NotificacaoResultadosFabricante(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    3 ->
		skip_group_NotificacaoResultadosFabricante(Rest,
							   Key bsr 3, 0, F@_1,
							   TrUserData);
	    5 ->
		skip_32_NotificacaoResultadosFabricante(Rest, 0, 0,
							F@_1, TrUserData)
	  end
    end;
dg_read_field_def_NotificacaoResultadosFabricante(<<>>,
						  0, 0, R1, TrUserData) ->
    #'NotificacaoResultadosFabricante'{encomendas =
					   lists_reverse(R1, TrUserData)}.

d_field_NotificacaoResultadosFabricante_encomendas(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_NotificacaoResultadosFabricante_encomendas(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
d_field_NotificacaoResultadosFabricante_encomendas(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OfertaEncomendaRequest(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NotificacaoResultadosFabricante(RestF,
						       0, 0,
						       cons(NewFValue, Prev,
							    TrUserData),
						       TrUserData).

skip_varint_NotificacaoResultadosFabricante(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_NotificacaoResultadosFabricante(Rest, Z1,
						Z2, F@_1, TrUserData);
skip_varint_NotificacaoResultadosFabricante(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosFabricante(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_length_delimited_NotificacaoResultadosFabricante(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotificacaoResultadosFabricante(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
skip_length_delimited_NotificacaoResultadosFabricante(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotificacaoResultadosFabricante(Rest2,
						       0, 0, F@_1, TrUserData).

skip_group_NotificacaoResultadosFabricante(Bin, FNum,
					   Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotificacaoResultadosFabricante(Rest,
						       0, Z2, F@_1, TrUserData).

skip_32_NotificacaoResultadosFabricante(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosFabricante(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_64_NotificacaoResultadosFabricante(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotificacaoResultadosFabricante(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'd_enum_LoginResponse.TipoUtilizador'(0) ->
    'FABRICANTE';
'd_enum_LoginResponse.TipoUtilizador'(1) ->
    'IMPORTADOR';
'd_enum_LoginResponse.TipoUtilizador'(2) -> 'ERRO';
'd_enum_LoginResponse.TipoUtilizador'(V) -> V.

'd_enum_OperationResponse.ResponseStatusCode'(0) ->
    'OK';
'd_enum_OperationResponse.ResponseStatusCode'(1) ->
    'INVALID';
'd_enum_OperationResponse.ResponseStatusCode'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginRequest' ->
	  merge_msg_LoginRequest(Prev, New, TrUserData);
      'LoginResponse' ->
	  merge_msg_LoginResponse(Prev, New, TrUserData);
      'AuthOperationRequest' ->
	  merge_msg_AuthOperationRequest(Prev, New, TrUserData);
      'OperationRequest' ->
	  merge_msg_OperationRequest(Prev, New, TrUserData);
      'OperationResponse' ->
	  merge_msg_OperationResponse(Prev, New, TrUserData);
      'OfertaProducaoRequest' ->
	  merge_msg_OfertaProducaoRequest(Prev, New, TrUserData);
      'OfertaEncomendaRequest' ->
	  merge_msg_OfertaEncomendaRequest(Prev, New, TrUserData);
      'NotificacaOfertaProducao' ->
	  merge_msg_NotificacaOfertaProducao(Prev, New,
					     TrUserData);
      'NotificacaoResultadosImportador' ->
	  merge_msg_NotificacaoResultadosImportador(Prev, New,
						    TrUserData);
      'NotificacaoResultadosFabricante' ->
	  merge_msg_NotificacaoResultadosFabricante(Prev, New,
						    TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_LoginRequest/3}).
merge_msg_LoginRequest(#'LoginRequest'{nome = PFnome,
				       password = PFpassword},
		       #'LoginRequest'{nome = NFnome, password = NFpassword},
		       _) ->
    #'LoginRequest'{nome =
			if NFnome =:= undefined -> PFnome;
			   true -> NFnome
			end,
		    password =
			if NFpassword =:= undefined -> PFpassword;
			   true -> NFpassword
			end}.

-compile({nowarn_unused_function,merge_msg_LoginResponse/3}).
merge_msg_LoginResponse(#'LoginResponse'{tipo = PFtipo},
			#'LoginResponse'{tipo = NFtipo}, _) ->
    #'LoginResponse'{tipo =
			 if NFtipo =:= undefined -> PFtipo;
			    true -> NFtipo
			 end}.

-compile({nowarn_unused_function,merge_msg_AuthOperationRequest/3}).
merge_msg_AuthOperationRequest(#'AuthOperationRequest'{password
							   = PFpassword,
						       request = PFrequest},
			       #'AuthOperationRequest'{password = NFpassword,
						       request = NFrequest},
			       TrUserData) ->
    #'AuthOperationRequest'{password =
				if NFpassword =:= undefined -> PFpassword;
				   true -> NFpassword
				end,
			    request =
				if PFrequest /= undefined,
				   NFrequest /= undefined ->
				       merge_msg_OperationRequest(PFrequest,
								  NFrequest,
								  TrUserData);
				   PFrequest == undefined -> NFrequest;
				   NFrequest == undefined -> PFrequest
				end}.

-compile({nowarn_unused_function,merge_msg_OperationRequest/3}).
merge_msg_OperationRequest(#'OperationRequest'{nome =
						   PFnome,
					       request = PFrequest},
			   #'OperationRequest'{nome = NFnome,
					       request = NFrequest},
			   TrUserData) ->
    #'OperationRequest'{nome =
			    if NFnome =:= undefined -> PFnome;
			       true -> NFnome
			    end,
			request =
			    case {PFrequest, NFrequest} of
			      {{producao, OPFrequest},
			       {producao, ONFrequest}} ->
				  {producao,
				   merge_msg_OfertaProducaoRequest(OPFrequest,
								   ONFrequest,
								   TrUserData)};
			      {{encomenda, OPFrequest},
			       {encomenda, ONFrequest}} ->
				  {encomenda,
				   merge_msg_OfertaEncomendaRequest(OPFrequest,
								    ONFrequest,
								    TrUserData)};
			      {_, undefined} -> PFrequest;
			      _ -> NFrequest
			    end}.

-compile({nowarn_unused_function,merge_msg_OperationResponse/3}).
merge_msg_OperationResponse(#'OperationResponse'{code =
						     PFcode},
			    #'OperationResponse'{code = NFcode}, _) ->
    #'OperationResponse'{code =
			     if NFcode =:= undefined -> PFcode;
				true -> NFcode
			     end}.

-compile({nowarn_unused_function,merge_msg_OfertaProducaoRequest/3}).
merge_msg_OfertaProducaoRequest(#'OfertaProducaoRequest'{produto
							     = PFproduto,
							 quantMin = PFquantMin,
							 quantMax = PFquantMax,
							 precoUniMin =
							     PFprecoUniMin,
							 duracaoS = PFduracaoS},
				#'OfertaProducaoRequest'{produto = NFproduto,
							 quantMin = NFquantMin,
							 quantMax = NFquantMax,
							 precoUniMin =
							     NFprecoUniMin,
							 duracaoS = NFduracaoS},
				_) ->
    #'OfertaProducaoRequest'{produto =
				 if NFproduto =:= undefined -> PFproduto;
				    true -> NFproduto
				 end,
			     quantMin =
				 if NFquantMin =:= undefined -> PFquantMin;
				    true -> NFquantMin
				 end,
			     quantMax =
				 if NFquantMax =:= undefined -> PFquantMax;
				    true -> NFquantMax
				 end,
			     precoUniMin =
				 if NFprecoUniMin =:= undefined ->
					PFprecoUniMin;
				    true -> NFprecoUniMin
				 end,
			     duracaoS =
				 if NFduracaoS =:= undefined -> PFduracaoS;
				    true -> NFduracaoS
				 end}.

-compile({nowarn_unused_function,merge_msg_OfertaEncomendaRequest/3}).
merge_msg_OfertaEncomendaRequest(#'OfertaEncomendaRequest'{fabricante
							       = PFfabricante,
							   produto = PFproduto,
							   quant = PFquant,
							   preco = PFpreco},
				 #'OfertaEncomendaRequest'{fabricante =
							       NFfabricante,
							   produto = NFproduto,
							   quant = NFquant,
							   preco = NFpreco},
				 _) ->
    #'OfertaEncomendaRequest'{fabricante =
				  if NFfabricante =:= undefined -> PFfabricante;
				     true -> NFfabricante
				  end,
			      produto =
				  if NFproduto =:= undefined -> PFproduto;
				     true -> NFproduto
				  end,
			      quant =
				  if NFquant =:= undefined -> PFquant;
				     true -> NFquant
				  end,
			      preco =
				  if NFpreco =:= undefined -> PFpreco;
				     true -> NFpreco
				  end}.

-compile({nowarn_unused_function,merge_msg_NotificacaOfertaProducao/3}).
merge_msg_NotificacaOfertaProducao(#'NotificacaOfertaProducao'{produto
								   = PFproduto,
							       quantMin =
								   PFquantMin,
							       quantMax =
								   PFquantMax,
							       precoUniMin =
								   PFprecoUniMin,
							       duracaoS =
								   PFduracaoS},
				   #'NotificacaOfertaProducao'{produto =
								   NFproduto,
							       quantMin =
								   NFquantMin,
							       quantMax =
								   NFquantMax,
							       precoUniMin =
								   NFprecoUniMin,
							       duracaoS =
								   NFduracaoS},
				   _) ->
    #'NotificacaOfertaProducao'{produto =
				    if NFproduto =:= undefined -> PFproduto;
				       true -> NFproduto
				    end,
				quantMin =
				    if NFquantMin =:= undefined -> PFquantMin;
				       true -> NFquantMin
				    end,
				quantMax =
				    if NFquantMax =:= undefined -> PFquantMax;
				       true -> NFquantMax
				    end,
				precoUniMin =
				    if NFprecoUniMin =:= undefined ->
					   PFprecoUniMin;
				       true -> NFprecoUniMin
				    end,
				duracaoS =
				    if NFduracaoS =:= undefined -> PFduracaoS;
				       true -> NFduracaoS
				    end}.

-compile({nowarn_unused_function,merge_msg_NotificacaoResultadosImportador/3}).
merge_msg_NotificacaoResultadosImportador(#'NotificacaoResultadosImportador'{fabricante
										 =
										 PFfabricante,
									     produto
										 =
										 PFproduto,
									     quant
										 =
										 PFquant,
									     preco
										 =
										 PFpreco},
					  #'NotificacaoResultadosImportador'{fabricante
										 =
										 NFfabricante,
									     produto
										 =
										 NFproduto,
									     quant
										 =
										 NFquant,
									     preco
										 =
										 NFpreco},
					  _) ->
    #'NotificacaoResultadosImportador'{fabricante =
					   if NFfabricante =:= undefined ->
						  PFfabricante;
					      true -> NFfabricante
					   end,
				       produto =
					   if NFproduto =:= undefined ->
						  PFproduto;
					      true -> NFproduto
					   end,
				       quant =
					   if NFquant =:= undefined -> PFquant;
					      true -> NFquant
					   end,
				       preco =
					   if NFpreco =:= undefined -> PFpreco;
					      true -> NFpreco
					   end}.

-compile({nowarn_unused_function,merge_msg_NotificacaoResultadosFabricante/3}).
merge_msg_NotificacaoResultadosFabricante(#'NotificacaoResultadosFabricante'{encomendas
										 =
										 PFencomendas},
					  #'NotificacaoResultadosFabricante'{encomendas
										 =
										 NFencomendas},
					  TrUserData) ->
    #'NotificacaoResultadosFabricante'{encomendas =
					   if PFencomendas /= undefined,
					      NFencomendas /= undefined ->
						  'erlang_++'(PFencomendas,
							      NFencomendas,
							      TrUserData);
					      PFencomendas == undefined ->
						  NFencomendas;
					      NFencomendas == undefined ->
						  PFencomendas
					   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'LoginRequest' ->
	  v_msg_LoginRequest(Msg, [MsgName], TrUserData);
      'LoginResponse' ->
	  v_msg_LoginResponse(Msg, [MsgName], TrUserData);
      'AuthOperationRequest' ->
	  v_msg_AuthOperationRequest(Msg, [MsgName], TrUserData);
      'OperationRequest' ->
	  v_msg_OperationRequest(Msg, [MsgName], TrUserData);
      'OperationResponse' ->
	  v_msg_OperationResponse(Msg, [MsgName], TrUserData);
      'OfertaProducaoRequest' ->
	  v_msg_OfertaProducaoRequest(Msg, [MsgName], TrUserData);
      'OfertaEncomendaRequest' ->
	  v_msg_OfertaEncomendaRequest(Msg, [MsgName],
				       TrUserData);
      'NotificacaOfertaProducao' ->
	  v_msg_NotificacaOfertaProducao(Msg, [MsgName],
					 TrUserData);
      'NotificacaoResultadosImportador' ->
	  v_msg_NotificacaoResultadosImportador(Msg, [MsgName],
						TrUserData);
      'NotificacaoResultadosFabricante' ->
	  v_msg_NotificacaoResultadosFabricante(Msg, [MsgName],
						TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_LoginRequest/3}).
-dialyzer({nowarn_function,v_msg_LoginRequest/3}).
v_msg_LoginRequest(#'LoginRequest'{nome = F1,
				   password = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [nome | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    ok;
v_msg_LoginRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginResponse/3}).
-dialyzer({nowarn_function,v_msg_LoginResponse/3}).
v_msg_LoginResponse(#'LoginResponse'{tipo = F1}, Path,
		    TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_LoginResponse.TipoUtilizador'(F1, [tipo | Path],
						 TrUserData)
    end,
    ok;
v_msg_LoginResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuthOperationRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthOperationRequest/3}).
v_msg_AuthOperationRequest(#'AuthOperationRequest'{password
						       = F1,
						   request = F2},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [password | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_OperationRequest(F2, [request | Path], TrUserData)
    end,
    ok;
v_msg_AuthOperationRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthOperationRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OperationRequest/3}).
-dialyzer({nowarn_function,v_msg_OperationRequest/3}).
v_msg_OperationRequest(#'OperationRequest'{nome = F1,
					   request = F2},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [nome | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {producao, OF2} ->
	  v_msg_OfertaProducaoRequest(OF2,
				      [producao, request | Path], TrUserData);
      {encomenda, OF2} ->
	  v_msg_OfertaEncomendaRequest(OF2,
				       [encomenda, request | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, [request | Path])
    end,
    ok;
v_msg_OperationRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OperationRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OperationResponse/3}).
-dialyzer({nowarn_function,v_msg_OperationResponse/3}).
v_msg_OperationResponse(#'OperationResponse'{code = F1},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_OperationResponse.ResponseStatusCode'(F1,
							 [code | Path],
							 TrUserData)
    end,
    ok;
v_msg_OperationResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OperationResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OfertaProducaoRequest/3}).
-dialyzer({nowarn_function,v_msg_OfertaProducaoRequest/3}).
v_msg_OfertaProducaoRequest(#'OfertaProducaoRequest'{produto
							 = F1,
						     quantMin = F2,
						     quantMax = F3,
						     precoUniMin = F4,
						     duracaoS = F5},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [produto | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [quantMin | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [quantMax | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int32(F4, [precoUniMin | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, [duracaoS | Path], TrUserData)
    end,
    ok;
v_msg_OfertaProducaoRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfertaProducaoRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_OfertaEncomendaRequest/3}).
-dialyzer({nowarn_function,v_msg_OfertaEncomendaRequest/3}).
v_msg_OfertaEncomendaRequest(#'OfertaEncomendaRequest'{fabricante
							   = F1,
						       produto = F2, quant = F3,
						       preco = F4},
			     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [fabricante | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [produto | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [quant | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [preco | Path], TrUserData)
    end,
    ok;
v_msg_OfertaEncomendaRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OfertaEncomendaRequest'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_NotificacaOfertaProducao/3}).
-dialyzer({nowarn_function,v_msg_NotificacaOfertaProducao/3}).
v_msg_NotificacaOfertaProducao(#'NotificacaOfertaProducao'{produto
							       = F1,
							   quantMin = F2,
							   quantMax = F3,
							   precoUniMin = F4,
							   duracaoS = F5},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [produto | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [quantMin | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [quantMax | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int32(F4, [precoUniMin | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, [duracaoS | Path], TrUserData)
    end,
    ok;
v_msg_NotificacaOfertaProducao(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'NotificacaOfertaProducao'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_NotificacaoResultadosImportador/3}).
-dialyzer({nowarn_function,v_msg_NotificacaoResultadosImportador/3}).
v_msg_NotificacaoResultadosImportador(#'NotificacaoResultadosImportador'{fabricante
									     =
									     F1,
									 produto
									     =
									     F2,
									 quant =
									     F3,
									 preco =
									     F4},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [fabricante | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [produto | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [quant | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [preco | Path], TrUserData)
    end,
    ok;
v_msg_NotificacaoResultadosImportador(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'NotificacaoResultadosImportador'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_NotificacaoResultadosFabricante/3}).
-dialyzer({nowarn_function,v_msg_NotificacaoResultadosFabricante/3}).
v_msg_NotificacaoResultadosFabricante(#'NotificacaoResultadosFabricante'{encomendas
									     =
									     F1},
				      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_OfertaEncomendaRequest(Elem,
					     [encomendas | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'OfertaEncomendaRequest'}},
			 F1, [encomendas | Path])
    end,
    ok;
v_msg_NotificacaoResultadosFabricante(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'NotificacaoResultadosFabricante'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_LoginResponse.TipoUtilizador'/3}).
-dialyzer({nowarn_function,'v_enum_LoginResponse.TipoUtilizador'/3}).
'v_enum_LoginResponse.TipoUtilizador'('FABRICANTE',
				      _Path, _TrUserData) ->
    ok;
'v_enum_LoginResponse.TipoUtilizador'('IMPORTADOR',
				      _Path, _TrUserData) ->
    ok;
'v_enum_LoginResponse.TipoUtilizador'('ERRO', _Path,
				      _TrUserData) ->
    ok;
'v_enum_LoginResponse.TipoUtilizador'(V, Path,
				      TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_LoginResponse.TipoUtilizador'(X, Path,
				      _TrUserData) ->
    mk_type_error({invalid_enum,
		   'LoginResponse.TipoUtilizador'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_OperationResponse.ResponseStatusCode'/3}).
-dialyzer({nowarn_function,'v_enum_OperationResponse.ResponseStatusCode'/3}).
'v_enum_OperationResponse.ResponseStatusCode'('OK',
					      _Path, _TrUserData) ->
    ok;
'v_enum_OperationResponse.ResponseStatusCode'('INVALID',
					      _Path, _TrUserData) ->
    ok;
'v_enum_OperationResponse.ResponseStatusCode'(V, Path,
					      TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_OperationResponse.ResponseStatusCode'(X, Path,
					      _TrUserData) ->
    mk_type_error({invalid_enum,
		   'OperationResponse.ResponseStatusCode'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'LoginResponse.TipoUtilizador'},
      [{'FABRICANTE', 0}, {'IMPORTADOR', 1}, {'ERRO', 2}]},
     {{enum, 'OperationResponse.ResponseStatusCode'},
      [{'OK', 0}, {'INVALID', 1}]},
     {{msg, 'LoginRequest'},
      [#field{name = nome, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'LoginResponse'},
      [#field{name = tipo, fnum = 1, rnum = 2,
	      type = {enum, 'LoginResponse.TipoUtilizador'},
	      occurrence = optional, opts = []}]},
     {{msg, 'AuthOperationRequest'},
      [#field{name = password, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = request, fnum = 2, rnum = 3,
	      type = {msg, 'OperationRequest'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'OperationRequest'},
      [#field{name = nome, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #gpb_oneof{name = request, rnum = 3,
		  fields =
		      [#field{name = producao, fnum = 2, rnum = 3,
			      type = {msg, 'OfertaProducaoRequest'},
			      occurrence = optional, opts = []},
		       #field{name = encomenda, fnum = 3, rnum = 3,
			      type = {msg, 'OfertaEncomendaRequest'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'OperationResponse'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'OperationResponse.ResponseStatusCode'},
	      occurrence = optional, opts = []}]},
     {{msg, 'OfertaProducaoRequest'},
      [#field{name = produto, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = quantMin, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = quantMax, fnum = 3, rnum = 4,
	      type = int32, occurrence = optional, opts = []},
       #field{name = precoUniMin, fnum = 4, rnum = 5,
	      type = int32, occurrence = optional, opts = []},
       #field{name = duracaoS, fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'OfertaEncomendaRequest'},
      [#field{name = fabricante, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = produto, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = quant, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = preco, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'NotificacaOfertaProducao'},
      [#field{name = produto, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = quantMin, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = quantMax, fnum = 3, rnum = 4,
	      type = int32, occurrence = optional, opts = []},
       #field{name = precoUniMin, fnum = 4, rnum = 5,
	      type = int32, occurrence = optional, opts = []},
       #field{name = duracaoS, fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'NotificacaoResultadosImportador'},
      [#field{name = fabricante, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = produto, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = quant, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = preco, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'NotificacaoResultadosFabricante'},
      [#field{name = encomendas, fnum = 1, rnum = 2,
	      type = {msg, 'OfertaEncomendaRequest'},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['LoginRequest', 'LoginResponse',
     'AuthOperationRequest', 'OperationRequest',
     'OperationResponse', 'OfertaProducaoRequest',
     'OfertaEncomendaRequest', 'NotificacaOfertaProducao',
     'NotificacaoResultadosImportador',
     'NotificacaoResultadosFabricante'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['LoginRequest', 'LoginResponse',
     'AuthOperationRequest', 'OperationRequest',
     'OperationResponse', 'OfertaProducaoRequest',
     'OfertaEncomendaRequest', 'NotificacaOfertaProducao',
     'NotificacaoResultadosImportador',
     'NotificacaoResultadosFabricante'].


get_enum_names() ->
    ['LoginResponse.TipoUtilizador',
     'OperationResponse.ResponseStatusCode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('LoginRequest') ->
    [#field{name = nome, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('LoginResponse') ->
    [#field{name = tipo, fnum = 1, rnum = 2,
	    type = {enum, 'LoginResponse.TipoUtilizador'},
	    occurrence = optional, opts = []}];
find_msg_def('AuthOperationRequest') ->
    [#field{name = password, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = request, fnum = 2, rnum = 3,
	    type = {msg, 'OperationRequest'}, occurrence = optional,
	    opts = []}];
find_msg_def('OperationRequest') ->
    [#field{name = nome, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #gpb_oneof{name = request, rnum = 3,
		fields =
		    [#field{name = producao, fnum = 2, rnum = 3,
			    type = {msg, 'OfertaProducaoRequest'},
			    occurrence = optional, opts = []},
		     #field{name = encomenda, fnum = 3, rnum = 3,
			    type = {msg, 'OfertaEncomendaRequest'},
			    occurrence = optional, opts = []}]}];
find_msg_def('OperationResponse') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'OperationResponse.ResponseStatusCode'},
	    occurrence = optional, opts = []}];
find_msg_def('OfertaProducaoRequest') ->
    [#field{name = produto, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = quantMin, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = quantMax, fnum = 3, rnum = 4,
	    type = int32, occurrence = optional, opts = []},
     #field{name = precoUniMin, fnum = 4, rnum = 5,
	    type = int32, occurrence = optional, opts = []},
     #field{name = duracaoS, fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('OfertaEncomendaRequest') ->
    [#field{name = fabricante, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = produto, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = quant, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = preco, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('NotificacaOfertaProducao') ->
    [#field{name = produto, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = quantMin, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = quantMax, fnum = 3, rnum = 4,
	    type = int32, occurrence = optional, opts = []},
     #field{name = precoUniMin, fnum = 4, rnum = 5,
	    type = int32, occurrence = optional, opts = []},
     #field{name = duracaoS, fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('NotificacaoResultadosImportador') ->
    [#field{name = fabricante, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = produto, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = quant, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = preco, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('NotificacaoResultadosFabricante') ->
    [#field{name = encomendas, fnum = 1, rnum = 2,
	    type = {msg, 'OfertaEncomendaRequest'},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('LoginResponse.TipoUtilizador') ->
    [{'FABRICANTE', 0}, {'IMPORTADOR', 1}, {'ERRO', 2}];
find_enum_def('OperationResponse.ResponseStatusCode') ->
    [{'OK', 0}, {'INVALID', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('LoginResponse.TipoUtilizador',
		     Value) ->
    'enum_symbol_by_value_LoginResponse.TipoUtilizador'(Value);
enum_symbol_by_value('OperationResponse.ResponseStatusCode',
		     Value) ->
    'enum_symbol_by_value_OperationResponse.ResponseStatusCode'(Value).


enum_value_by_symbol('LoginResponse.TipoUtilizador',
		     Sym) ->
    'enum_value_by_symbol_LoginResponse.TipoUtilizador'(Sym);
enum_value_by_symbol('OperationResponse.ResponseStatusCode',
		     Sym) ->
    'enum_value_by_symbol_OperationResponse.ResponseStatusCode'(Sym).


'enum_symbol_by_value_LoginResponse.TipoUtilizador'(0) ->
    'FABRICANTE';
'enum_symbol_by_value_LoginResponse.TipoUtilizador'(1) ->
    'IMPORTADOR';
'enum_symbol_by_value_LoginResponse.TipoUtilizador'(2) ->
    'ERRO'.


'enum_value_by_symbol_LoginResponse.TipoUtilizador'('FABRICANTE') ->
    0;
'enum_value_by_symbol_LoginResponse.TipoUtilizador'('IMPORTADOR') ->
    1;
'enum_value_by_symbol_LoginResponse.TipoUtilizador'('ERRO') ->
    2.

'enum_symbol_by_value_OperationResponse.ResponseStatusCode'(0) ->
    'OK';
'enum_symbol_by_value_OperationResponse.ResponseStatusCode'(1) ->
    'INVALID'.


'enum_value_by_symbol_OperationResponse.ResponseStatusCode'('OK') ->
    0;
'enum_value_by_symbol_OperationResponse.ResponseStatusCode'('INVALID') ->
    1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ProtoBuffers.LoginRequest">>) -> 'LoginRequest';
fqbin_to_msg_name(<<"ProtoBuffers.LoginResponse">>) -> 'LoginResponse';
fqbin_to_msg_name(<<"ProtoBuffers.AuthOperationRequest">>) -> 'AuthOperationRequest';
fqbin_to_msg_name(<<"ProtoBuffers.OperationRequest">>) -> 'OperationRequest';
fqbin_to_msg_name(<<"ProtoBuffers.OperationResponse">>) -> 'OperationResponse';
fqbin_to_msg_name(<<"ProtoBuffers.OfertaProducaoRequest">>) -> 'OfertaProducaoRequest';
fqbin_to_msg_name(<<"ProtoBuffers.OfertaEncomendaRequest">>) -> 'OfertaEncomendaRequest';
fqbin_to_msg_name(<<"ProtoBuffers.NotificacaOfertaProducao">>) ->
    'NotificacaOfertaProducao';
fqbin_to_msg_name(<<"ProtoBuffers.NotificacaoResultadosImportador">>) ->
    'NotificacaoResultadosImportador';
fqbin_to_msg_name(<<"ProtoBuffers.NotificacaoResultadosFabricante">>) ->
    'NotificacaoResultadosFabricante';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('LoginRequest') -> <<"ProtoBuffers.LoginRequest">>;
msg_name_to_fqbin('LoginResponse') -> <<"ProtoBuffers.LoginResponse">>;
msg_name_to_fqbin('AuthOperationRequest') -> <<"ProtoBuffers.AuthOperationRequest">>;
msg_name_to_fqbin('OperationRequest') -> <<"ProtoBuffers.OperationRequest">>;
msg_name_to_fqbin('OperationResponse') -> <<"ProtoBuffers.OperationResponse">>;
msg_name_to_fqbin('OfertaProducaoRequest') -> <<"ProtoBuffers.OfertaProducaoRequest">>;
msg_name_to_fqbin('OfertaEncomendaRequest') -> <<"ProtoBuffers.OfertaEncomendaRequest">>;
msg_name_to_fqbin('NotificacaOfertaProducao') ->
    <<"ProtoBuffers.NotificacaOfertaProducao">>;
msg_name_to_fqbin('NotificacaoResultadosImportador') ->
    <<"ProtoBuffers.NotificacaoResultadosImportador">>;
msg_name_to_fqbin('NotificacaoResultadosFabricante') ->
    <<"ProtoBuffers.NotificacaoResultadosFabricante">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"ProtoBuffers.LoginResponse.TipoUtilizador">>) ->
    'LoginResponse.TipoUtilizador';
fqbin_to_enum_name(<<"ProtoBuffers.OperationResponse.ResponseStatusCode">>) ->
    'OperationResponse.ResponseStatusCode';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('LoginResponse.TipoUtilizador') ->
    <<"ProtoBuffers.LoginResponse.TipoUtilizador">>;
enum_name_to_fqbin('OperationResponse.ResponseStatusCode') ->
    <<"ProtoBuffers.OperationResponse.ResponseStatusCode">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'ProtoBuffers'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protos.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protos.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protos"].


get_msg_containment("protos") ->
    ['AuthOperationRequest', 'LoginRequest',
     'LoginResponse', 'NotificacaOfertaProducao',
     'NotificacaoResultadosFabricante',
     'NotificacaoResultadosImportador',
     'OfertaEncomendaRequest', 'OfertaProducaoRequest',
     'OperationRequest', 'OperationResponse'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("protos") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("protos") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("protos") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("protos") ->
    ['LoginResponse.TipoUtilizador',
     'OperationResponse.ResponseStatusCode'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.NotificacaoResultadosImportador">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.OperationRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.OfertaProducaoRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.OfertaEncomendaRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.LoginRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.AuthOperationRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.OperationResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.NotificacaoResultadosFabricante">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.LoginResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"ProtoBuffers.NotificacaOfertaProducao">>) -> "protos";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"ProtoBuffers.LoginResponse.TipoUtilizador">>) -> "protos";
get_proto_by_enum_name_as_fqbin(<<"ProtoBuffers.OperationResponse.ResponseStatusCode">>) -> "protos";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.6".

gpb_version_as_list() ->
    [4,10,6].
